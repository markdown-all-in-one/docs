"use strict";(self.webpackChunkmarkdown_all_in_one_docs=self.webpackChunkmarkdown_all_in_one_docs||[]).push([[7376],{7283:(e,n,i)=>{i.r(n),i.d(n,{data:()=>t});const t={key:"v-1a6dd70e",path:"/guide/key-binding.html",title:"Key binding",lang:"en-US",frontmatter:{description:"A quick reference to the default keyboard shortcuts for Markdown All in One"},excerpt:"",headers:[{level:2,title:"Overview",slug:"overview",children:[]},{level:2,title:"Key binding reference",slug:"key-binding-reference",children:[]}],filePathRelative:"guide/key-binding.md"}},1638:(e,n,i)=>{i.r(n),i.d(n,{default:()=>o});const t=(0,i(6252).uE)('<h1 id="key-binding" tabindex="-1"><a class="header-anchor" href="#key-binding" aria-hidden="true">#</a> Key binding</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>Markdown All in One lets you perform common tasks directly from the keyboard.</p><p>A key binding is assigned only when it&#39;s necessary and essential. We try to balance popularity and conflicts.</p><p>There is no &quot;best&quot;, &quot;dominant&quot;, or &quot;one-for-all&quot; solution. Our default key bindings manage to be intuitive with the lowest possible learning cost, although this may introduce some strange compatibility issues.</p><p>The key bindings for basic <strong>rich text editing</strong> follow the conventions from other rich text editors.</p><p>As for <strong>list editing</strong>, we hook VS Code&#39;s default key bindings of selection editing, mainly including line operations and indentation operations.</p><h2 id="key-binding-reference" tabindex="-1"><a class="header-anchor" href="#key-binding-reference" aria-hidden="true">#</a> Key binding reference</h2><p>This section lists out the default key bindings (keyboard shortcuts).</p><p>Our command IDs all begin with <code>markdown.extension.</code>.</p>',10),o={render:function(e,n){return t}}}}]);