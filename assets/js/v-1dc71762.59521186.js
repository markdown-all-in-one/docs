"use strict";(self.webpackChunkmarkdown_all_in_one_docs=self.webpackChunkmarkdown_all_in_one_docs||[]).push([[9262],{5979:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-1dc71762",path:"/contributing/code-style/typescript.html",title:"TypeScript",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Identifiers",slug:"identifiers",children:[{level:3,title:"Overall goal",slug:"overall-goal",children:[]},{level:3,title:"Constant",slug:"constant",children:[]},{level:3,title:"Class, Enum, Enum member",slug:"class-enum-enum-member",children:[]},{level:3,title:"Interface, Type alias",slug:"interface-type-alias",children:[]},{level:3,title:"Type parameter",slug:"type-parameter",children:[]},{level:3,title:"Variable, Parameter, Function, Method, Property, Module alias",slug:"variable-parameter-function-method-property-module-alias",children:[]},{level:3,title:"Namespace, Decorator",slug:"namespace-decorator",children:[]}]},{level:2,title:"Examples",slug:"examples",children:[]}],filePathRelative:"contributing/code-style/typescript.md"}},3342:(n,s,a)=>{a.r(s),a.d(s,{default:()=>_});var e=a(6252);const p=(0,e.uE)('<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h2 id="identifiers" tabindex="-1"><a class="header-anchor" href="#identifiers" aria-hidden="true">#</a> Identifiers</h2><table><thead><tr><th>Category</th><th>Pattern</th></tr></thead><tbody><tr><td>Constant</td><td><code>Title_Case_Snake_Case</code></td></tr><tr><td>Class, Enum, Enum member</td><td><code>PascalCase</code></td></tr><tr><td>Interface, Type alias</td><td><code>IPascalCase</code></td></tr><tr><td>Type parameter</td><td><code>PascalCase</code></td></tr><tr><td>Variable, Parameter, Function, Method, Property, Module alias</td><td><code>camelCase</code></td></tr></tbody></table><h3 id="overall-goal" tabindex="-1"><a class="header-anchor" href="#overall-goal" aria-hidden="true">#</a> Overall goal</h3><p>An identifier should contain only upper case ASCII letters (U+0041 ~ U+005A), lower case ASCII letters (U+0061 ~ U+007A), ASCII digits (U+0030 ~ U+0039), hyphens (U+002D), and underscores (U+005F).</p><p>The rule for a kind of identifiers should add details upon generic common styles.</p><h3 id="constant" tabindex="-1"><a class="header-anchor" href="#constant" aria-hidden="true">#</a> Constant</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z][a-z0-9]*(_[A-Z][a-z0-9]*)+$</span><span class="token regex-delimiter">/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Examples:</strong></p><ul><li><p><code>Non_Archived_Resources</code></p></li><li><p><code>Sidebar_Config</code></p></li><li><p><code>Slugify_Methods</code></p></li><li><p><code>Test_Workspace_Path</code></p></li></ul><p><strong>Description:</strong></p>',11),t=(0,e.Uk)("A "),o={href:"https://google.github.io/styleguide/tsguide.html#identifiers",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("constant"),l=(0,e.Uk)(" can be instantiated only once over the lifetime of the program, is intended to not be changed, and users must not modify it in any way."),r=(0,e.Wm)("p",null,[(0,e.Uk)("The identifier of a constant use "),(0,e.Wm)("code",null,"snake_case"),(0,e.Uk)(" with the first letter of each word capitalized, and must be made of at least two words. We call it "),(0,e.Wm)("code",null,"Title_Case_Snake_Case"),(0,e.Uk)(".")],-1),i=(0,e.Wm)("p",null,[(0,e.Wm)("strong",null,"Background:")],-1),u=(0,e.Wm)("p",null,[(0,e.Uk)("Enormous projects use "),(0,e.Wm)("code",null,"UPPER_CASE_SNAKE_CASE"),(0,e.Uk)(", and even call it "),(0,e.Wm)("code",null,"CONSTANT_CASE"),(0,e.Uk)(". However, we find it problematic, and suggest avoiding it. Generally speaking, mixed case is easiest to read and write, and all lower case is equally good, while all upper case is terrible. Constants are often used to hold important immutable values. When you propagate them across the codebase, significant negative visual effect of terrible styles will arise.")],-1),k=(0,e.Uk)('As for the "at least two words" requirement, we find in practice that the names of constants usually need two or three words to be '),d={href:"https://testing.googleblog.com/2017/10/code-health-identifiernamingpostforworl.html",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("clear and precise"),m=(0,e.Uk)("."),y=(0,e.uE)('<h3 id="class-enum-enum-member" tabindex="-1"><a class="header-anchor" href="#class-enum-enum-member" aria-hidden="true">#</a> Class, Enum, Enum member</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([A-Z][a-z0-9]+)+$</span><span class="token regex-delimiter">/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Examples:</strong></p><ul><li><p><code>DownwardsArrowWithCornerLeftwards</code></p></li><li><p><code>EventEmitter</code></p></li><li><p><code>FontIcon</code></p></li><li><p><code>Lazy</code></p></li></ul><p><strong>Description:</strong></p><p>Use <code>PascalCase</code>.</p><h3 id="interface-type-alias" tabindex="-1"><a class="header-anchor" href="#interface-type-alias" aria-hidden="true">#</a> Interface, Type alias</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^I([A-Z][a-z0-9]+)+$</span><span class="token regex-delimiter">/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Examples:</strong></p><ul><li><p><code>ICase</code></p></li><li><p><code>IDecorationAnalysisTask</code></p></li><li><p><code>IDecorationRecord</code></p></li><li><p><code>IDisposable</code></p></li><li><p><code>IDocumentToken</code></p></li><li><p><code>IInternalOption</code></p></li><li><p><code>IKnownKey</code></p></li><li><p><code>IMarkdownEngine</code></p></li><li><p><code>INlsBundle</code></p></li><li><p><code>IPrimitive</code></p></li><li><p><code>IWorkerRegistry</code></p></li></ul><p><strong>Description:</strong></p><p>It&#39;s the same as class, but prefixed with <code>I</code>.</p><p><strong>Background:</strong></p>',13),h=(0,e.Uk)("Someone advises against marking interfaces with special prefix, probably because interfaces are natural and frequent in JavaScript's "),f={href:"https://flow.org/en/docs/lang/nominal-structural/",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("structural type system"),g=(0,e.Uk)("."),v=(0,e.Wm)("p",null,"We tried, but had a worse experience. The style helps to reduce distraction on small projects. But it soon becomes friction as the scale grows.",-1),x=(0,e.Wm)("p",null,[(0,e.Uk)("Interfaces are basically contracts that cannot be instantiated or contain any implementation. However, it's quite easy to forget this without a special mark. Too many times, some developers wondered why it's not allowed to "),(0,e.Wm)("code",null,"new"),(0,e.Uk)(" an object, and the codebase eventually revealed that the type is an interface.")],-1),I=(0,e.Uk)("To let it hit developers that they are not classes, you need to "),S={href:"https://google.github.io/styleguide/tsguide.html#naming-style",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("name interfaces nicely"),U=(0,e.Uk)('. From our experience, very few names can be intuitively recognized as "just a set of declarations of properties". Then, it goes back to how to mark interfaces.'),T=(0,e.uE)('<p>Thus, we now think marking interfaces specially is good for engineering. We can discuss it as this style seems not consistent with other parts.</p><h3 id="type-parameter" tabindex="-1"><a class="header-anchor" href="#type-parameter" aria-hidden="true">#</a> Type parameter</h3><p><strong>Description:</strong></p><p>It&#39;s the same as class, but can also be single upper case letter.</p><h3 id="variable-parameter-function-method-property-module-alias" tabindex="-1"><a class="header-anchor" href="#variable-parameter-function-method-property-module-alias" aria-hidden="true">#</a> Variable, Parameter, Function, Method, Property, Module alias</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z][a-z0-9]*([A-Z][a-z0-9]+)*$</span><span class="token regex-delimiter">/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>Examples:</strong></p><ul><li><p><code>applyDecoration</code></p></li><li><p><code>fs</code></p></li><li><p><code>inlineTokens</code></p></li><li><p><code>isWelcomeMessagesExist</code></p></li><li><p><code>onDidOpenTextDocument</code></p></li><li><p><code>parseInline</code></p></li><li><p><code>projectLevelOmittedHeadings</code></p></li><li><p><code>resolveResource</code></p></li><li><p><code>utf8Encoder</code></p></li><li><p><code>workers</code></p></li></ul><p><strong>Description:</strong></p><p>Use <code>camelCase</code>.</p><h3 id="namespace-decorator" tabindex="-1"><a class="header-anchor" href="#namespace-decorator" aria-hidden="true">#</a> Namespace, Decorator</h3><p>Avoid.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>The examples are for demonstration only. They are naive, and are never guaranteed to work.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// File: i-disposable.ts</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IDisposable</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * Performs application-defined tasks associated with freeing, releasing, or resetting resources.\n     */</span>\n    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// File: text-writer.ts</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&quot;vscode&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IDisposable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./i-disposable&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> utf8Encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Represents the state of a writer.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">enum</span> WriterState <span class="token punctuation">{</span>\n    Idle<span class="token punctuation">,</span>\n    Dirty<span class="token punctuation">,</span>\n    Disposed<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Represents a writer that can write a sequential series of characters.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ITextWriter</span> <span class="token keyword">extends</span> <span class="token class-name">IDisposable</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.\n     */</span>\n    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * Writes a string to the text stream.\n     */</span>\n    <span class="token function">write</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Default buffer size: 1024 bytes.\n */</span>\n<span class="token keyword">const</span> Default_Buffer_Size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Implements a naive text writer that appends text to a file.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TextFileWriter</span> <span class="token keyword">implements</span> <span class="token class-name">ITextWriter</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> #buffer<span class="token operator">:</span> Uint8Array<span class="token punctuation">;</span>\n\n    <span class="token keyword">readonly</span> #file<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * The next available index in the buffer.\n     */</span>\n    #bufferRear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    #state<span class="token operator">:</span> WriterState <span class="token operator">=</span> WriterState<span class="token punctuation">.</span>Idle<span class="token punctuation">;</span>\n\n    <span class="token keyword">get</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#file<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">get</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#state<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token parameter">file</span> The file will be created, if it does not already exist.\n     * <span class="token keyword">@param</span> <span class="token parameter">bufferSize</span> The buffer size in bytes.\n     */</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span>file<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">,</span> bufferSize <span class="token operator">=</span> Default_Buffer_Size<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>#file <span class="token operator">=</span> file<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>#buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">async</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#state <span class="token operator">===</span> WriterState<span class="token punctuation">.</span>Disposed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// Avoid throwing error.</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>#state <span class="token operator">=</span> WriterState<span class="token punctuation">.</span>Disposed<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">#readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Thenable<span class="token operator">&lt;</span>Uint8Array<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> vscode<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n            <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">,</span>\n            <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">vscode</span><span class="token punctuation">.</span>FileSystemError <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&quot;FileNotFound&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">throw</span> error<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    async <span class="token function">#writeFile</span><span class="token punctuation">(</span><span class="token operator">...</span>data<span class="token operator">:</span> <span class="token keyword">readonly</span> Uint8Array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> totalLength <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> result <span class="token operator">+</span> item<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>totalLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;`data` is empty.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>totalLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">let</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            content<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            ptr <span class="token operator">+=</span> item<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">await</span> vscode<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#file<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">async</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#writeFile</span><span class="token punctuation">(</span>\n            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>#buffer<span class="token punctuation">.</span><span class="token function">subarray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear<span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>#state <span class="token operator">=</span> WriterState<span class="token punctuation">.</span>Idle<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">async</span> <span class="token function">write</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> bin <span class="token operator">=</span> utf8Encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear <span class="token operator">+</span> bin<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#writeFile</span><span class="token punctuation">(</span>\n                <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>#buffer<span class="token punctuation">.</span><span class="token function">subarray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                bin\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>#state <span class="token operator">=</span> WriterState<span class="token punctuation">.</span>Idle<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>#buffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bin<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>#bufferRear <span class="token operator">+=</span> bin<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>#state <span class="token operator">=</span> WriterState<span class="token punctuation">.</span>Dirty<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// File: dump.ts</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> vscode <span class="token keyword">from</span> <span class="token string">&quot;vscode&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> TextFileWriter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./text-writer&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ISerializablePrimitive</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Represents an array that can be serialized to JSON.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ISerializableArray</span> <span class="token operator">=</span> ReadonlyArray<span class="token operator">&lt;</span>ISerializablePrimitive <span class="token operator">|</span> ISerializableObject<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Represents an object that can be serialized to JSON.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISerializableObject</span> <span class="token punctuation">{</span>\n    <span class="token keyword">readonly</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> ISerializablePrimitive <span class="token operator">|</span> ISerializableObject <span class="token operator">|</span> ISerializableArray<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Serializes the data to JSON, and appends it to the file.\n *\n * <span class="token keyword">@param</span> <span class="token parameter">path</span> The Uri that points to the file.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">dump</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> ISerializableObject <span class="token operator">|</span> ISerializableArray<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n    path<span class="token operator">:</span> vscode<span class="token punctuation">.</span>Uri<span class="token punctuation">,</span>\n    data<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextFileWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> writer<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',17),_={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[t,(0,e.Wm)("a",o,[c,(0,e.Wm)(a)]),l]),r,i,u,(0,e.Wm)("p",null,[k,(0,e.Wm)("a",d,[b,(0,e.Wm)(a)]),m]),y,(0,e.Wm)("p",null,[h,(0,e.Wm)("a",f,[w,(0,e.Wm)(a)]),g]),v,x,(0,e.Wm)("p",null,[I,(0,e.Wm)("a",S,[W,(0,e.Wm)(a)]),U]),T],64)}}}}]);